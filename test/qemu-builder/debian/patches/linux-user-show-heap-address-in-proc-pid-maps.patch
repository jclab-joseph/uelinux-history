From 5eb30f8fdc5e8f1f333e5ac222772ea2c69a8bb4 Mon Sep 17 00:00:00 2001
From: Helge Deller <deller@gmx.de>
Date: Tue, 25 Jul 2023 13:52:16 +0200
Subject: [PATCH 1/3] linux-user: Show heap address in /proc/pid/maps

Show the memory location of the heap in the /proc/pid/maps file inside the
guest. The heap address will be stored in ts->heap_base, so make that
variable visible for all guest architectures, not just architectures for
semihosted binaries (arm, m68k, riscv).

Show 32- and 64-bit pointers with 8 digits and leading zeros (%08x/%08lx).
For 64-bit we could use %16lx, but we mimic the Linux kernel, which shows
it with %08lx too.

Example:

user@machine:/# uname -a
Linux paq 5.15.88+ #47 SMP Sun Jan 15 12:53:11 CET 2023 aarch64 GNU/Linux

user@machine:/# cat /proc/self/maps
00000000-00009000 r-xp 00000000 08:01 2380521                            /usr/bin/cat
00009000-0001f000 ---p 00000000 00:00 0
0001f000-00020000 r--p 0000f000 08:01 2380521                            /usr/bin/cat
00020000-00021000 rw-p 00010000 08:01 2380521                            /usr/bin/cat
00021000-00042000 rw-p 00000000 00:00 0                                  [heap]
5500000000-5500001000 ---p 00000000 00:00 0
5500001000-5500801000 rw-p 00000000 00:00 0                              [stack]
5500801000-5500827000 r-xp 00000000 08:01 2395258                        /usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1
5500827000-550083f000 ---p 00000000 00:00 0
550083f000-5500841000 r--p 0002e000 08:01 2395258                        /usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1
5500841000-5500843000 rw-p 00030000 08:01 2395258                        /usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1
5500843000-5500844000 r-xp 00000000 00:00 0
5500844000-5500846000 rw-p 00000000 00:00 0
5500850000-55009d7000 r-xp 00000000 08:01 2395261                        /usr/lib/aarch64-linux-gnu/libc.so.6
55009d7000-55009ed000 ---p 00187000 08:01 2395261                        /usr/lib/aarch64-linux-gnu/libc.so.6
55009ed000-55009f0000 r--p 0018d000 08:01 2395261                        /usr/lib/aarch64-linux-gnu/libc.so.6
55009f0000-55009f2000 rw-p 00190000 08:01 2395261                        /usr/lib/aarch64-linux-gnu/libc.so.6
55009f2000-55009ff000 rw-p 00000000 00:00 0

Signed-off-by: Helge Deller <deller@gmx.de>
---
 include/exec/cpu_ldst.h | 4 ++--
 linux-user/main.c       | 1 +
 linux-user/qemu.h       | 4 ++--
 linux-user/syscall.c    | 8 ++++++--
 4 files changed, 11 insertions(+), 6 deletions(-)

diff --git a/include/exec/cpu_ldst.h b/include/exec/cpu_ldst.h
index 645476f0e5..f1e6f31e88 100644
--- a/include/exec/cpu_ldst.h
+++ b/include/exec/cpu_ldst.h
@@ -72,10 +72,10 @@
  */
 #if TARGET_VIRT_ADDR_SPACE_BITS <= 32
 typedef uint32_t abi_ptr;
-#define TARGET_ABI_FMT_ptr "%x"
+#define TARGET_ABI_FMT_ptr "%08x"
 #else
 typedef uint64_t abi_ptr;
-#define TARGET_ABI_FMT_ptr "%"PRIx64
+#define TARGET_ABI_FMT_ptr "%08"PRIx64
 #endif
 
 #ifndef TARGET_TAGGED_ADDRESSES
diff --git a/linux-user/main.c b/linux-user/main.c
index dba67ffa36..12f3d8a93e 100644
--- a/linux-user/main.c
+++ b/linux-user/main.c
@@ -955,6 +955,7 @@ int main(int argc, char **argv, char **envp)
        the real value of GUEST_BASE into account.  */
     tcg_prologue_init(tcg_ctx);
 
+    ts->heap_base = info->brk;
     target_cpu_copy_regs(env, regs);
 
     if (gdbstub) {
diff --git a/linux-user/qemu.h b/linux-user/qemu.h
index 802794db63..7a6adac637 100644
--- a/linux-user/qemu.h
+++ b/linux-user/qemu.h
@@ -121,11 +121,11 @@ typedef struct TaskState {
 #ifdef TARGET_M68K
     abi_ulong tp_value;
 #endif
-#if defined(TARGET_ARM) || defined(TARGET_M68K) || defined(TARGET_RISCV)
+
     /* Extra fields for semihosted binaries.  */
     abi_ulong heap_base;
     abi_ulong heap_limit;
-#endif
+
     abi_ulong stack_base;
     int used; /* non zero if used */
     struct image_info *info;
diff --git a/linux-user/syscall.c b/linux-user/syscall.c
index 95727a816a..220c4a04b8 100644
--- a/linux-user/syscall.c
+++ b/linux-user/syscall.c
@@ -8131,14 +8131,18 @@ static int open_self_maps_1(CPUArchState *cpu_env, int fd, bool smaps)
                 continue;
             }
 
+            path = e->path;
+
+            if (ts->heap_base && h2g(min) == ts->heap_base) {
+                path = "[heap]";
+            }
+
 #ifdef TARGET_HPPA
             if (h2g(max) == ts->info->stack_limit) {
 #else
             if (h2g(min) == ts->info->stack_limit) {
 #endif
                 path = "[stack]";
-            } else {
-                path = e->path;
             }
 
             count = dprintf(fd, TARGET_ABI_FMT_ptr "-" TARGET_ABI_FMT_ptr
-- 
2.39.2

